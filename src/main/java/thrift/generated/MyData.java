///**
// * Autogenerated by Thrift Compiler (0.12.0)
// *
// * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
// *  @generated
// */
//package thrift.generated;
//
//@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.12.0)", date = "2019-06-14")
//public class MyData {
//
//  public interface Iface {
//
//    public Student getDataInfo(String name) throws MyDataException, org.apache.thrift.TException;
//
//    public void saveData(Student student) throws org.apache.thrift.TException;
//
//  }
//
//  public interface AsyncIface {
//
//    public void getDataInfo(String name, org.apache.thrift.async.AsyncMethodCallback<Student> resultHandler) throws org.apache.thrift.TException;
//
//    public void saveData(Student student, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;
//
//  }
//
//  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
//    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
//      public Factory() {}
//      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
//        return new Client(prot);
//      }
//      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
//        return new Client(iprot, oprot);
//      }
//    }
//
//    public Client(org.apache.thrift.protocol.TProtocol prot)
//    {
//      super(prot, prot);
//    }
//
//    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
//      super(iprot, oprot);
//    }
//
//    public Student getDataInfo(String name) throws MyDataException, org.apache.thrift.TException
//    {
//      send_getDataInfo(name);
//      return recv_getDataInfo();
//    }
//
//    public void send_getDataInfo(String name) throws org.apache.thrift.TException
//    {
//      getDataInfo_args args = new getDataInfo_args();
//      args.setName(name);
//      sendBase("getDataInfo", args);
//    }
//
//    public Student recv_getDataInfo() throws MyDataException, org.apache.thrift.TException
//    {
//      getDataInfo_result result = new getDataInfo_result();
//      receiveBase(result, "getDataInfo");
//      if (result.isSetSuccess()) {
//        return result.success;
//      }
//      if (result.mydata != null) {
//        throw result.mydata;
//      }
//      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDataInfo failed: unknown result");
//    }
//
//    public void saveData(Student student) throws org.apache.thrift.TException
//    {
//      send_saveData(student);
//      recv_saveData();
//    }
//
//    public void send_saveData(Student student) throws org.apache.thrift.TException
//    {
//      saveData_args args = new saveData_args();
//      args.setStudent(student);
//      sendBase("saveData", args);
//    }
//
//    public void recv_saveData() throws org.apache.thrift.TException
//    {
//      saveData_result result = new saveData_result();
//      receiveBase(result, "saveData");
//      return;
//    }
//
//  }
//  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
//    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
//      private org.apache.thrift.async.TAsyncClientManager clientManager;
//      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
//      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
//        this.clientManager = clientManager;
//        this.protocolFactory = protocolFactory;
//      }
//      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
//        return new AsyncClient(protocolFactory, clientManager, transport);
//      }
//    }
//
//    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
//      super(protocolFactory, clientManager, transport);
//    }
//
//    public void getDataInfo(String name, org.apache.thrift.async.AsyncMethodCallback<Student> resultHandler) throws org.apache.thrift.TException {
//      checkReady();
//      getDataInfo_call method_call = new getDataInfo_call(name, resultHandler, this, ___protocolFactory, ___transport);
//      this.___currentMethod = method_call;
//      ___manager.call(method_call);
//    }
//
//    public static class getDataInfo_call extends org.apache.thrift.async.TAsyncMethodCall<Student> {
//      private String name;
//      public getDataInfo_call(String name, org.apache.thrift.async.AsyncMethodCallback<Student> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
//        super(client, protocolFactory, transport, resultHandler, false);
//        this.name = name;
//      }
//
//      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
//        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDataInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
//        getDataInfo_args args = new getDataInfo_args();
//        args.setName(name);
//        args.write(prot);
//        prot.writeMessageEnd();
//      }
//
//      public Student getResult() throws MyDataException, org.apache.thrift.TException {
//        if (getState() != State.RESPONSE_READ) {
//          throw new IllegalStateException("Method call not finished!");
//        }
//        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
//        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
//        return (new Client(prot)).recv_getDataInfo();
//      }
//    }
//
//    public void saveData(Student student, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
//      checkReady();
//      saveData_call method_call = new saveData_call(student, resultHandler, this, ___protocolFactory, ___transport);
//      this.___currentMethod = method_call;
//      ___manager.call(method_call);
//    }
//
//    public static class saveData_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
//      private Student student;
//      public saveData_call(Student student, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
//        super(client, protocolFactory, transport, resultHandler, false);
//        this.student = student;
//      }
//
//      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
//        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveData", org.apache.thrift.protocol.TMessageType.CALL, 0));
//        saveData_args args = new saveData_args();
//        args.setStudent(student);
//        args.write(prot);
//        prot.writeMessageEnd();
//      }
//
//      public Void getResult() throws org.apache.thrift.TException {
//        if (getState() != State.RESPONSE_READ) {
//          throw new IllegalStateException("Method call not finished!");
//        }
//        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
//        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
//        return null;
//      }
//    }
//
//  }
//
//  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
//    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
//    public Processor(I iface) {
//      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
//    }
//
//    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
//      super(iface, getProcessMap(processMap));
//    }
//
//    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
//      processMap.put("getDataInfo", new getDataInfo());
//      processMap.put("saveData", new saveData());
//      return processMap;
//    }
//
//    public static class getDataInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDataInfo_args> {
//      public getDataInfo() {
//        super("getDataInfo");
//      }
//
//      public getDataInfo_args getEmptyArgsInstance() {
//        return new getDataInfo_args();
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      @Override
//      protected boolean rethrowUnhandledExceptions() {
//        return false;
//      }
//
//      public getDataInfo_result getResult(I iface, getDataInfo_args args) throws org.apache.thrift.TException {
//        getDataInfo_result result = new getDataInfo_result();
//        try {
//          result.success = iface.getDataInfo(args.name);
//        } catch (MyDataException mydata) {
//          result.mydata = mydata;
//        }
//        return result;
//      }
//    }
//
//    public static class saveData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveData_args> {
//      public saveData() {
//        super("saveData");
//      }
//
//      public saveData_args getEmptyArgsInstance() {
//        return new saveData_args();
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      @Override
//      protected boolean rethrowUnhandledExceptions() {
//        return false;
//      }
//
//      public saveData_result getResult(I iface, saveData_args args) throws org.apache.thrift.TException {
//        saveData_result result = new saveData_result();
//        iface.saveData(args.student);
//        return result;
//      }
//    }
//
//  }
//
//  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
//    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
//    public AsyncProcessor(I iface) {
//      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
//    }
//
//    protected AsyncProcessor(I iface, java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
//      super(iface, getProcessMap(processMap));
//    }
//
//    private static <I extends AsyncIface> java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
//      processMap.put("getDataInfo", new getDataInfo());
//      processMap.put("saveData", new saveData());
//      return processMap;
//    }
//
//    public static class getDataInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDataInfo_args, Student> {
//      public getDataInfo() {
//        super("getDataInfo");
//      }
//
//      public getDataInfo_args getEmptyArgsInstance() {
//        return new getDataInfo_args();
//      }
//
//      public org.apache.thrift.async.AsyncMethodCallback<Student> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
//        final org.apache.thrift.AsyncProcessFunction fcall = this;
//        return new org.apache.thrift.async.AsyncMethodCallback<Student>() {
//          public void onComplete(Student o) {
//            getDataInfo_result result = new getDataInfo_result();
//            result.success = o;
//            try {
//              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
//            } catch (org.apache.thrift.transport.TTransportException e) {
//              _LOGGER.error("TTransportException writing to internal frame buffer", e);
//              fb.close();
//            } catch (Exception e) {
//              _LOGGER.error("Exception writing to internal frame buffer", e);
//              onError(e);
//            }
//          }
//          public void onError(Exception e) {
//            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
//            org.apache.thrift.TSerializable msg;
//            getDataInfo_result result = new getDataInfo_result();
//            if (e instanceof MyDataException) {
//              result.mydata = (MyDataException) e;
//              result.setMydataIsSet(true);
//              msg = result;
//            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
//              _LOGGER.error("TTransportException inside handler", e);
//              fb.close();
//              return;
//            } else if (e instanceof org.apache.thrift.TApplicationException) {
//              _LOGGER.error("TApplicationException inside handler", e);
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = (org.apache.thrift.TApplicationException)e;
//            } else {
//              _LOGGER.error("Exception inside handler", e);
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
//            }
//            try {
//              fcall.sendResponse(fb,msg,msgType,seqid);
//            } catch (Exception ex) {
//              _LOGGER.error("Exception writing to internal frame buffer", ex);
//              fb.close();
//            }
//          }
//        };
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public void start(I iface, getDataInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Student> resultHandler) throws org.apache.thrift.TException {
//        iface.getDataInfo(args.name,resultHandler);
//      }
//    }
//
//    public static class saveData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveData_args, Void> {
//      public saveData() {
//        super("saveData");
//      }
//
//      public saveData_args getEmptyArgsInstance() {
//        return new saveData_args();
//      }
//
//      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
//        final org.apache.thrift.AsyncProcessFunction fcall = this;
//        return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
//          public void onComplete(Void o) {
//            saveData_result result = new saveData_result();
//            try {
//              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
//            } catch (org.apache.thrift.transport.TTransportException e) {
//              _LOGGER.error("TTransportException writing to internal frame buffer", e);
//              fb.close();
//            } catch (Exception e) {
//              _LOGGER.error("Exception writing to internal frame buffer", e);
//              onError(e);
//            }
//          }
//          public void onError(Exception e) {
//            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
//            org.apache.thrift.TSerializable msg;
//            saveData_result result = new saveData_result();
//            if (e instanceof org.apache.thrift.transport.TTransportException) {
//              _LOGGER.error("TTransportException inside handler", e);
//              fb.close();
//              return;
//            } else if (e instanceof org.apache.thrift.TApplicationException) {
//              _LOGGER.error("TApplicationException inside handler", e);
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = (org.apache.thrift.TApplicationException)e;
//            } else {
//              _LOGGER.error("Exception inside handler", e);
//              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
//              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
//            }
//            try {
//              fcall.sendResponse(fb,msg,msgType,seqid);
//            } catch (Exception ex) {
//              _LOGGER.error("Exception writing to internal frame buffer", ex);
//              fb.close();
//            }
//          }
//        };
//      }
//
//      protected boolean isOneway() {
//        return false;
//      }
//
//      public void start(I iface, saveData_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
//        iface.saveData(args.student,resultHandler);
//      }
//    }
//
//  }
//
//  public static class getDataInfo_args implements org.apache.thrift.TBase<getDataInfo_args, getDataInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDataInfo_args>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataInfo_args");
//
//    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
//
//    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDataInfo_argsStandardSchemeFactory();
//    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDataInfo_argsTupleSchemeFactory();
//
//    public @org.apache.thrift.annotation.Nullable String name; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      NAME((short)1, "name");
//
//      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 1: // NAME
//            return NAME;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.REQUIRED,
//          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "String")));
//      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataInfo_args.class, metaDataMap);
//    }
//
//    public getDataInfo_args() {
//    }
//
//    public getDataInfo_args(
//      String name)
//    {
//      this();
//      this.name = name;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public getDataInfo_args(getDataInfo_args other) {
//      if (other.isSetName()) {
//        this.name = other.name;
//      }
//    }
//
//    public getDataInfo_args deepCopy() {
//      return new getDataInfo_args(this);
//    }
//
//    @Override
//    public void clear() {
//      this.name = null;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public String getName() {
//      return this.name;
//    }
//
//    public getDataInfo_args setName(@org.apache.thrift.annotation.Nullable String name) {
//      this.name = name;
//      return this;
//    }
//
//    public void unsetName() {
//      this.name = null;
//    }
//
//    /** Returns true if field name is set (has been assigned a value) and false otherwise */
//    public boolean isSetName() {
//      return this.name != null;
//    }
//
//    public void setNameIsSet(boolean value) {
//      if (!value) {
//        this.name = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
//      switch (field) {
//      case NAME:
//        if (value == null) {
//          unsetName();
//        } else {
//          setName((String)value);
//        }
//        break;
//
//      }
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case NAME:
//        return getName();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case NAME:
//        return isSetName();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof getDataInfo_args)
//        return this.equals((getDataInfo_args)that);
//      return false;
//    }
//
//    public boolean equals(getDataInfo_args that) {
//      if (that == null)
//        return false;
//      if (this == that)
//        return true;
//
//      boolean this_present_name = true && this.isSetName();
//      boolean that_present_name = true && that.isSetName();
//      if (this_present_name || that_present_name) {
//        if (!(this_present_name && that_present_name))
//          return false;
//        if (!this.name.equals(that.name))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      int hashCode = 1;
//
//      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
//      if (isSetName())
//        hashCode = hashCode * 8191 + name.hashCode();
//
//      return hashCode;
//    }
//
//    @Override
//    public int compareTo(getDataInfo_args other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetName()).compareTo(other.isSetName());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetName()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      scheme(iprot).read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      scheme(oprot).write(oprot, this);
//    }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("getDataInfo_args(");
//      boolean first = true;
//
//      sb.append("name:");
//      if (this.name == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.name);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      if (name == null) {
//        throw new org.apache.thrift.protocol.TProtocolException("Required field 'name' was not present! Struct: " + toString());
//      }
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class getDataInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public getDataInfo_argsStandardScheme getScheme() {
//        return new getDataInfo_argsStandardScheme();
//      }
//    }
//
//    private static class getDataInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDataInfo_args> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataInfo_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 1: // NAME
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
//                struct.name = iprot.readString();
//                struct.setNameIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataInfo_args struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.name != null) {
//          oprot.writeFieldBegin(NAME_FIELD_DESC);
//          oprot.writeString(struct.name);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class getDataInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public getDataInfo_argsTupleScheme getScheme() {
//        return new getDataInfo_argsTupleScheme();
//      }
//    }
//
//    private static class getDataInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDataInfo_args> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, getDataInfo_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//        oprot.writeString(struct.name);
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, getDataInfo_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//        struct.name = iprot.readString();
//        struct.setNameIsSet(true);
//      }
//    }
//
//    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
//      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
//    }
//  }
//
//  public static class getDataInfo_result implements org.apache.thrift.TBase<getDataInfo_result, getDataInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDataInfo_result>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDataInfo_result");
//
//    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
//    private static final org.apache.thrift.protocol.TField MYDATA_FIELD_DESC = new org.apache.thrift.protocol.TField("mydata", org.apache.thrift.protocol.TType.STRUCT, (short)1);
//
//    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDataInfo_resultStandardSchemeFactory();
//    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDataInfo_resultTupleSchemeFactory();
//
//    public @org.apache.thrift.annotation.Nullable Student success; // required
//    public @org.apache.thrift.annotation.Nullable MyDataException mydata; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      SUCCESS((short)0, "success"),
//      MYDATA((short)1, "mydata");
//
//      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 0: // SUCCESS
//            return SUCCESS;
//          case 1: // MYDATA
//            return MYDATA;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Student.class)));
//      tmpMap.put(_Fields.MYDATA, new org.apache.thrift.meta_data.FieldMetaData("mydata", org.apache.thrift.TFieldRequirementType.DEFAULT,
//          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, MyDataException.class)));
//      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDataInfo_result.class, metaDataMap);
//    }
//
//    public getDataInfo_result() {
//    }
//
//    public getDataInfo_result(
//      Student success,
//      MyDataException mydata)
//    {
//      this();
//      this.success = success;
//      this.mydata = mydata;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public getDataInfo_result(getDataInfo_result other) {
//      if (other.isSetSuccess()) {
//        this.success = new Student(other.success);
//      }
//      if (other.isSetMydata()) {
//        this.mydata = new MyDataException(other.mydata);
//      }
//    }
//
//    public getDataInfo_result deepCopy() {
//      return new getDataInfo_result(this);
//    }
//
//    @Override
//    public void clear() {
//      this.success = null;
//      this.mydata = null;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public Student getSuccess() {
//      return this.success;
//    }
//
//    public getDataInfo_result setSuccess(@org.apache.thrift.annotation.Nullable Student success) {
//      this.success = success;
//      return this;
//    }
//
//    public void unsetSuccess() {
//      this.success = null;
//    }
//
//    /** Returns true if field success is set (has been assigned a value) and false otherwise */
//    public boolean isSetSuccess() {
//      return this.success != null;
//    }
//
//    public void setSuccessIsSet(boolean value) {
//      if (!value) {
//        this.success = null;
//      }
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public MyDataException getMydata() {
//      return this.mydata;
//    }
//
//    public getDataInfo_result setMydata(@org.apache.thrift.annotation.Nullable MyDataException mydata) {
//      this.mydata = mydata;
//      return this;
//    }
//
//    public void unsetMydata() {
//      this.mydata = null;
//    }
//
//    /** Returns true if field mydata is set (has been assigned a value) and false otherwise */
//    public boolean isSetMydata() {
//      return this.mydata != null;
//    }
//
//    public void setMydataIsSet(boolean value) {
//      if (!value) {
//        this.mydata = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
//      switch (field) {
//      case SUCCESS:
//        if (value == null) {
//          unsetSuccess();
//        } else {
//          setSuccess((Student)value);
//        }
//        break;
//
//      case MYDATA:
//        if (value == null) {
//          unsetMydata();
//        } else {
//          setMydata((MyDataException)value);
//        }
//        break;
//
//      }
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case SUCCESS:
//        return getSuccess();
//
//      case MYDATA:
//        return getMydata();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case SUCCESS:
//        return isSetSuccess();
//      case MYDATA:
//        return isSetMydata();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof getDataInfo_result)
//        return this.equals((getDataInfo_result)that);
//      return false;
//    }
//
//    public boolean equals(getDataInfo_result that) {
//      if (that == null)
//        return false;
//      if (this == that)
//        return true;
//
//      boolean this_present_success = true && this.isSetSuccess();
//      boolean that_present_success = true && that.isSetSuccess();
//      if (this_present_success || that_present_success) {
//        if (!(this_present_success && that_present_success))
//          return false;
//        if (!this.success.equals(that.success))
//          return false;
//      }
//
//      boolean this_present_mydata = true && this.isSetMydata();
//      boolean that_present_mydata = true && that.isSetMydata();
//      if (this_present_mydata || that_present_mydata) {
//        if (!(this_present_mydata && that_present_mydata))
//          return false;
//        if (!this.mydata.equals(that.mydata))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      int hashCode = 1;
//
//      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
//      if (isSetSuccess())
//        hashCode = hashCode * 8191 + success.hashCode();
//
//      hashCode = hashCode * 8191 + ((isSetMydata()) ? 131071 : 524287);
//      if (isSetMydata())
//        hashCode = hashCode * 8191 + mydata.hashCode();
//
//      return hashCode;
//    }
//
//    @Override
//    public int compareTo(getDataInfo_result other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetSuccess()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      lastComparison = Boolean.valueOf(isSetMydata()).compareTo(other.isSetMydata());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetMydata()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mydata, other.mydata);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      scheme(iprot).read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      scheme(oprot).write(oprot, this);
//      }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("getDataInfo_result(");
//      boolean first = true;
//
//      sb.append("success:");
//      if (this.success == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.success);
//      }
//      first = false;
//      if (!first) sb.append(", ");
//      sb.append("mydata:");
//      if (this.mydata == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.mydata);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      // check for sub-struct validity
//      if (success != null) {
//        success.validate();
//      }
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class getDataInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public getDataInfo_resultStandardScheme getScheme() {
//        return new getDataInfo_resultStandardScheme();
//      }
//    }
//
//    private static class getDataInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDataInfo_result> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, getDataInfo_result struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 0: // SUCCESS
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
//                struct.success = new Student();
//                struct.success.read(iprot);
//                struct.setSuccessIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            case 1: // MYDATA
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
//                struct.mydata = new MyDataException();
//                struct.mydata.read(iprot);
//                struct.setMydataIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, getDataInfo_result struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.success != null) {
//          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
//          struct.success.write(oprot);
//          oprot.writeFieldEnd();
//        }
//        if (struct.mydata != null) {
//          oprot.writeFieldBegin(MYDATA_FIELD_DESC);
//          struct.mydata.write(oprot);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class getDataInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public getDataInfo_resultTupleScheme getScheme() {
//        return new getDataInfo_resultTupleScheme();
//      }
//    }
//
//    private static class getDataInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDataInfo_result> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, getDataInfo_result struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//        java.util.BitSet optionals = new java.util.BitSet();
//        if (struct.isSetSuccess()) {
//          optionals.set(0);
//        }
//        if (struct.isSetMydata()) {
//          optionals.set(1);
//        }
//        oprot.writeBitSet(optionals, 2);
//        if (struct.isSetSuccess()) {
//          struct.success.write(oprot);
//        }
//        if (struct.isSetMydata()) {
//          struct.mydata.write(oprot);
//        }
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, getDataInfo_result struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//        java.util.BitSet incoming = iprot.readBitSet(2);
//        if (incoming.get(0)) {
//          struct.success = new Student();
//          struct.success.read(iprot);
//          struct.setSuccessIsSet(true);
//        }
//        if (incoming.get(1)) {
//          struct.mydata = new MyDataException();
//          struct.mydata.read(iprot);
//          struct.setMydataIsSet(true);
//        }
//      }
//    }
//
//    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
//      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
//    }
//  }
//
//  public static class saveData_args implements org.apache.thrift.TBase<saveData_args, saveData_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveData_args>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveData_args");
//
//    private static final org.apache.thrift.protocol.TField STUDENT_FIELD_DESC = new org.apache.thrift.protocol.TField("student", org.apache.thrift.protocol.TType.STRUCT, (short)1);
//
//    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveData_argsStandardSchemeFactory();
//    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveData_argsTupleSchemeFactory();
//
//    public @org.apache.thrift.annotation.Nullable Student student; // required
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//      STUDENT((short)1, "student");
//
//      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          case 1: // STUDENT
//            return STUDENT;
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//
//    // isset id assignments
//    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      tmpMap.put(_Fields.STUDENT, new org.apache.thrift.meta_data.FieldMetaData("student", org.apache.thrift.TFieldRequirementType.REQUIRED,
//          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Student.class)));
//      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveData_args.class, metaDataMap);
//    }
//
//    public saveData_args() {
//    }
//
//    public saveData_args(
//      Student student)
//    {
//      this();
//      this.student = student;
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public saveData_args(saveData_args other) {
//      if (other.isSetStudent()) {
//        this.student = new Student(other.student);
//      }
//    }
//
//    public saveData_args deepCopy() {
//      return new saveData_args(this);
//    }
//
//    @Override
//    public void clear() {
//      this.student = null;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public Student getStudent() {
//      return this.student;
//    }
//
//    public saveData_args setStudent(@org.apache.thrift.annotation.Nullable Student student) {
//      this.student = student;
//      return this;
//    }
//
//    public void unsetStudent() {
//      this.student = null;
//    }
//
//    /** Returns true if field student is set (has been assigned a value) and false otherwise */
//    public boolean isSetStudent() {
//      return this.student != null;
//    }
//
//    public void setStudentIsSet(boolean value) {
//      if (!value) {
//        this.student = null;
//      }
//    }
//
//    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
//      switch (field) {
//      case STUDENT:
//        if (value == null) {
//          unsetStudent();
//        } else {
//          setStudent((Student)value);
//        }
//        break;
//
//      }
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      case STUDENT:
//        return getStudent();
//
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      case STUDENT:
//        return isSetStudent();
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof saveData_args)
//        return this.equals((saveData_args)that);
//      return false;
//    }
//
//    public boolean equals(saveData_args that) {
//      if (that == null)
//        return false;
//      if (this == that)
//        return true;
//
//      boolean this_present_student = true && this.isSetStudent();
//      boolean that_present_student = true && that.isSetStudent();
//      if (this_present_student || that_present_student) {
//        if (!(this_present_student && that_present_student))
//          return false;
//        if (!this.student.equals(that.student))
//          return false;
//      }
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      int hashCode = 1;
//
//      hashCode = hashCode * 8191 + ((isSetStudent()) ? 131071 : 524287);
//      if (isSetStudent())
//        hashCode = hashCode * 8191 + student.hashCode();
//
//      return hashCode;
//    }
//
//    @Override
//    public int compareTo(saveData_args other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      lastComparison = Boolean.valueOf(isSetStudent()).compareTo(other.isSetStudent());
//      if (lastComparison != 0) {
//        return lastComparison;
//      }
//      if (isSetStudent()) {
//        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.student, other.student);
//        if (lastComparison != 0) {
//          return lastComparison;
//        }
//      }
//      return 0;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      scheme(iprot).read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      scheme(oprot).write(oprot, this);
//    }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("saveData_args(");
//      boolean first = true;
//
//      sb.append("student:");
//      if (this.student == null) {
//        sb.append("null");
//      } else {
//        sb.append(this.student);
//      }
//      first = false;
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      if (student == null) {
//        throw new org.apache.thrift.protocol.TProtocolException("Required field 'student' was not present! Struct: " + toString());
//      }
//      // check for sub-struct validity
//      if (student != null) {
//        student.validate();
//      }
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class saveData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public saveData_argsStandardScheme getScheme() {
//        return new saveData_argsStandardScheme();
//      }
//    }
//
//    private static class saveData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveData_args> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, saveData_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            case 1: // STUDENT
//              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
//                struct.student = new Student();
//                struct.student.read(iprot);
//                struct.setStudentIsSet(true);
//              } else {
//                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//              }
//              break;
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, saveData_args struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        if (struct.student != null) {
//          oprot.writeFieldBegin(STUDENT_FIELD_DESC);
//          struct.student.write(oprot);
//          oprot.writeFieldEnd();
//        }
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class saveData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public saveData_argsTupleScheme getScheme() {
//        return new saveData_argsTupleScheme();
//      }
//    }
//
//    private static class saveData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveData_args> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, saveData_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//        struct.student.write(oprot);
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, saveData_args struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//        struct.student = new Student();
//        struct.student.read(iprot);
//        struct.setStudentIsSet(true);
//      }
//    }
//
//    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
//      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
//    }
//  }
//
//  public static class saveData_result implements org.apache.thrift.TBase<saveData_result, saveData_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveData_result>   {
//    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveData_result");
//
//
//    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveData_resultStandardSchemeFactory();
//    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveData_resultTupleSchemeFactory();
//
//
//    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
//    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
//;
//
//      private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();
//
//      static {
//        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
//          byName.put(field.getFieldName(), field);
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByThriftId(int fieldId) {
//        switch(fieldId) {
//          default:
//            return null;
//        }
//      }
//
//      /**
//       * Find the _Fields constant that matches fieldId, throwing an exception
//       * if it is not found.
//       */
//      public static _Fields findByThriftIdOrThrow(int fieldId) {
//        _Fields fields = findByThriftId(fieldId);
//        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
//        return fields;
//      }
//
//      /**
//       * Find the _Fields constant that matches name, or null if its not found.
//       */
//      @org.apache.thrift.annotation.Nullable
//      public static _Fields findByName(String name) {
//        return byName.get(name);
//      }
//
//      private final short _thriftId;
//      private final String _fieldName;
//
//      _Fields(short thriftId, String fieldName) {
//        _thriftId = thriftId;
//        _fieldName = fieldName;
//      }
//
//      public short getThriftFieldId() {
//        return _thriftId;
//      }
//
//      public String getFieldName() {
//        return _fieldName;
//      }
//    }
//    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
//    static {
//      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
//      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
//      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveData_result.class, metaDataMap);
//    }
//
//    public saveData_result() {
//    }
//
//    /**
//     * Performs a deep copy on <i>other</i>.
//     */
//    public saveData_result(saveData_result other) {
//    }
//
//    public saveData_result deepCopy() {
//      return new saveData_result(this);
//    }
//
//    @Override
//    public void clear() {
//    }
//
//    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable Object value) {
//      switch (field) {
//      }
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public Object getFieldValue(_Fields field) {
//      switch (field) {
//      }
//      throw new IllegalStateException();
//    }
//
//    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
//    public boolean isSet(_Fields field) {
//      if (field == null) {
//        throw new IllegalArgumentException();
//      }
//
//      switch (field) {
//      }
//      throw new IllegalStateException();
//    }
//
//    @Override
//    public boolean equals(Object that) {
//      if (that == null)
//        return false;
//      if (that instanceof saveData_result)
//        return this.equals((saveData_result)that);
//      return false;
//    }
//
//    public boolean equals(saveData_result that) {
//      if (that == null)
//        return false;
//      if (this == that)
//        return true;
//
//      return true;
//    }
//
//    @Override
//    public int hashCode() {
//      int hashCode = 1;
//
//      return hashCode;
//    }
//
//    @Override
//    public int compareTo(saveData_result other) {
//      if (!getClass().equals(other.getClass())) {
//        return getClass().getName().compareTo(other.getClass().getName());
//      }
//
//      int lastComparison = 0;
//
//      return 0;
//    }
//
//    @org.apache.thrift.annotation.Nullable
//    public _Fields fieldForId(int fieldId) {
//      return _Fields.findByThriftId(fieldId);
//    }
//
//    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
//      scheme(iprot).read(iprot, this);
//    }
//
//    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
//      scheme(oprot).write(oprot, this);
//      }
//
//    @Override
//    public String toString() {
//      StringBuilder sb = new StringBuilder("saveData_result(");
//      boolean first = true;
//
//      sb.append(")");
//      return sb.toString();
//    }
//
//    public void validate() throws org.apache.thrift.TException {
//      // check for required fields
//      // check for sub-struct validity
//    }
//
//    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
//      try {
//        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
//      try {
//        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
//      } catch (org.apache.thrift.TException te) {
//        throw new java.io.IOException(te);
//      }
//    }
//
//    private static class saveData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public saveData_resultStandardScheme getScheme() {
//        return new saveData_resultStandardScheme();
//      }
//    }
//
//    private static class saveData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveData_result> {
//
//      public void read(org.apache.thrift.protocol.TProtocol iprot, saveData_result struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TField schemeField;
//        iprot.readStructBegin();
//        while (true)
//        {
//          schemeField = iprot.readFieldBegin();
//          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
//            break;
//          }
//          switch (schemeField.id) {
//            default:
//              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
//          }
//          iprot.readFieldEnd();
//        }
//        iprot.readStructEnd();
//
//        // check for required fields of primitive type, which can't be checked in the validate method
//        struct.validate();
//      }
//
//      public void write(org.apache.thrift.protocol.TProtocol oprot, saveData_result struct) throws org.apache.thrift.TException {
//        struct.validate();
//
//        oprot.writeStructBegin(STRUCT_DESC);
//        oprot.writeFieldStop();
//        oprot.writeStructEnd();
//      }
//
//    }
//
//    private static class saveData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
//      public saveData_resultTupleScheme getScheme() {
//        return new saveData_resultTupleScheme();
//      }
//    }
//
//    private static class saveData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveData_result> {
//
//      @Override
//      public void write(org.apache.thrift.protocol.TProtocol prot, saveData_result struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//      }
//
//      @Override
//      public void read(org.apache.thrift.protocol.TProtocol prot, saveData_result struct) throws org.apache.thrift.TException {
//        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
//      }
//    }
//
//    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
//      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
//    }
//  }
//
//}
